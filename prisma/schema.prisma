//currently building an internal management software for a kinesitherapy center, the requirements needed are to keep track of appointments, patients, also services they needed on each session, keeping track of payments, also keeping track of expenses and revenue on each week. also providing some monthly reports etc...
//i'using react, nextjs,prisma,postgresql, first let's talk about non technical requirements. the problem and the flow needed if you need any information feel free to ask

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// this model is for management personnels
model User {
    id          String   @id @default(cuid())
    name        String
    email       String   @unique
    image       String   @db.Text
    password    String
    phoneNumber String?  @unique @map("phone_number")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    @@map("utilisateurs")
}

// this model is for patients
model Patient {
    id                Int           @id @default(autoincrement())
    firstName         String        @map("first_name")
    lastName          String        @map("last_name")
    email             String?
    dateOfBirth       DateTime?     @map("date_of_birth")
    phoneNumber       String?       @map("phone_number")
    address           String?       @db.Text
    notes             String?       @db.Text
    // medical history: it means the patient's medical history which includes the patient's past and present health issues, surgeries, medications, allergies, and other medical conditions.
    insuranceProvider String?
    createdAt         DateTime      @default(now()) @map("created_at")
    updatedAt         DateTime      @updatedAt @map("updated_at")
    appointments      Appointment[]

    @@map("patients")
}

model Therapist {
    id         String   @id @default(cuid())
    name       String
    image      String   @db.Text
    speciality String?
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@map("therapists")
}

model Appointment {
    id          String   @id @default(cuid())
    patientId   Int      @map("patient_id")
    therapistId String   @map("therapist_id")
    serviceId   String?  @map("service_id")
    date        DateTime
    duration    Int // in minutes
    status      String // pending, confirmed, cancelled: when the patient cancels the appointment or the therapist cancels the appointment or the appointment is cancelled by the management
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    // when the appointment is confirmed, the service is added to the appointment
    service     Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
    patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

    @@map("appointments")
}

model Service {
    id        String   @id @default(cuid())
    name      String
    price     Float
    duration  Int
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    appointments Appointment[]

    @@map("services")
}
